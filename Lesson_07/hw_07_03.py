# Задание №3
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# © geekbrains.ru 20
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, cell_size):
        if not isinstance(cell_size, int):
            raise TypeError('Секунды должны быть целым числом')
        self.cell_size = cell_size

    def __str__(self):
        nstr = str(f'Новая клетка размером {self.cell_size} ячеек')
        return nstr

    def __add__(self, other):
        print('Сложение клеток')
        return Cell(self.cell_size + other.cell_size)

    def __sub__(self, other):
        print('Вычитание клеток')
        sub_cell = self.cell_size - other.cell_size
        if sub_cell <= 0:
            raise TypeError('Разность количества ячеек двух клеток меньше нуля')
        return Cell(sub_cell)

    def __mul__(self, other):
        print('Умножение клеток')
        return Cell(self.cell_size * other.cell_size)

    def __truediv__(self, other):
        print('Деление клеток')
        div_cell = self.cell_size // other.cell_size
        if div_cell <= 0:
            raise TypeError('Разность количества ячеек двух клеток меньше нуля')
        return Cell(div_cell)

    def make_order(self, cell_row):
        print(f'Метод отображение клетки размером ячеек {self.cell_size}')
        self.cell_row = cell_row
        result = ''
        for i in range(int(self.cell_size / self.cell_row)):
            result += '*' * self.cell_row + '\n'
        result += '*' * (self.cell_size % self.cell_row) + '\n'
        return result


c1 = Cell(13)
print(c1)
c2 = Cell(7)
print(c2)
print(c1 + c2)
print(c1 - c2)
print(c1 * c2)
print(c1 / c2)
print(c1.make_order(5))
